[
  {
    "id": "module:badwords",
    "longname": "module:badwords",
    "name": "badwords",
    "kind": "module",
    "description": "Automod BadWordsCommand - Toggle the bad words filter\n\nPlease note that when adding new words to your server's filter you overwrite all your currently set words!\n\n**Aliases**: `badwordsfilter`, `bwf`, `bwf`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Optional: comma separated list of words to filter",
        "name": "words"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "badwords.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\automod"
    },
    "preserveName": true,
    "examples": [
      "badwords enable"
    ],
    "category": "automod",
    "order": 0
  },
  {
    "id": "module:duptext",
    "longname": "module:duptext",
    "name": "duptext",
    "kind": "module",
    "description": "Automod DuplicateTextCommand - Toggle the duplicate text filter\n\nUses the Levenshtein Distance Algorithm to determine similarity. If the distance is less than 10 the messages are\n    considered duplicate.\n\nYou can specify the minutes within messages should be checked (defaults to 3), the amount of allowed similar\n    messages (defaults to 2) and the Levenshtein distance (defaults to 20)\n\n**Aliases**: `duplicatefilter`, `duplicatetextfilter`, `dtf`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Amount of minutes between which text is checked",
        "name": "within"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Amount of similar messages before purging",
        "name": "equals"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Levenshtein distance for similarity",
        "name": "distance"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "duptext.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\automod"
    },
    "preserveName": true,
    "examples": [
      "duptext enable"
    ],
    "category": "automod",
    "order": 1
  },
  {
    "id": "module:excessivecaps",
    "longname": "module:excessivecaps",
    "name": "excessivecaps",
    "kind": "module",
    "description": "Automod ExcessiveCapsCommand - Toggle the excessive caps filter\n\n**Aliases**: `spammedcaps`, `manycaps`, `caps`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "How much percent of a message should be caps to delete",
        "name": "threshold"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Minimum length of message before it is checked",
        "name": "minlength"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "excessivecaps.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\automod"
    },
    "preserveName": true,
    "examples": [
      "excessivecaps enable"
    ],
    "category": "automod",
    "order": 2
  },
  {
    "id": "module:excessiveemojis",
    "longname": "module:excessiveemojis",
    "name": "excessiveemojis",
    "kind": "module",
    "description": "Automod ExcessiveEmojisCommand - Toggle the excessive emojis filter\n\n**Aliases**: `ef`, `emojifilter`, `spammedemojis`, `manyemojis`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "How much percent of a message should be emojis to delete",
        "name": "threshold"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Minimum length of message before it is checked",
        "name": "minlength"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "excessiveemojis.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\automod"
    },
    "preserveName": true,
    "examples": [
      "excessiveemojis enable"
    ],
    "category": "automod",
    "order": 3
  },
  {
    "id": "module:excessivementions",
    "longname": "module:excessivementions",
    "name": "excessivementions",
    "kind": "module",
    "description": "Automod ExcessiveMentionsCommand - Toggle the excessive mentions filter\n\n**Aliases**: `emf`, `mfilter`,  `spammedmentions`, `manymentions`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "How many mentions allowed in 1 message",
        "name": "threshold"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "excessivementions.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\automod"
    },
    "preserveName": true,
    "examples": [
      "excessivementions enable",
      "emf enable 3"
    ],
    "category": "automod",
    "order": 4
  },
  {
    "id": "module:externallinks",
    "longname": "module:externallinks",
    "name": "externallinks",
    "kind": "module",
    "description": "Automod ExternalLinksCommand - Toggle the external links filter\n\n**Aliases**: `extlinks`, `extlinksfilter`, `elf`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "externallinks.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\automod"
    },
    "preserveName": true,
    "examples": [
      "externallinks enable"
    ],
    "category": "automod",
    "order": 5
  },
  {
    "id": "module:invitesfilter",
    "longname": "module:invitesfilter",
    "name": "invitesfilter",
    "kind": "module",
    "description": "Automod InvitesFilterCommand - Toggle the Discord server invites filter\n\n**Aliases**: `if`, `noinvites`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "invitesfilter.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\automod"
    },
    "preserveName": true,
    "examples": [
      "invitesfilter enable"
    ],
    "category": "automod",
    "order": 6
  },
  {
    "id": "module:slowmode",
    "longname": "module:slowmode",
    "name": "slowmode",
    "kind": "module",
    "description": "Automod SlowmodeCommand - Toggle slowmode on this server\n\n**Aliases**: `slowdown`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Optional: Boundaries for slowmode",
        "name": "Within"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "slowmode.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\automod"
    },
    "preserveName": true,
    "examples": [
      "slowmode enable"
    ],
    "category": "automod",
    "order": 7
  },
  {
    "id": "module:bank",
    "longname": "module:bank",
    "name": "bank",
    "kind": "module",
    "description": "Casino BankCommand - View your vault content\n\n**Aliases**: `vault`",
    "meta": {
      "lineno": 2,
      "filename": "bank.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "examples": [
      "bank"
    ],
    "category": "casino",
    "order": 8
  },
  {
    "id": "module:chips",
    "longname": "module:chips",
    "name": "chips",
    "kind": "module",
    "description": "Casino ChipsCommand - Retrieves your current amount of chips for the casino\n\n**Aliases**: `bal`, `cash`, `balance`",
    "meta": {
      "lineno": 2,
      "filename": "chips.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "examples": [
      "chips"
    ],
    "category": "casino",
    "order": 9
  },
  {
    "id": "module:coin",
    "longname": "module:coin",
    "name": "coin",
    "kind": "module",
    "description": "Casino CoinCommand - Gamble your chips in a coin flip\n\nPayout is 1:2\n**Aliases**: `flip`, `cflip`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Amount of chips you want to gamble",
        "name": "AmountOfChips"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The side of the coin you want to bet on",
        "name": "CoinSide"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "coin.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "examples": [
      "coin 10 heads"
    ],
    "category": "casino",
    "order": 10
  },
  {
    "id": "module:daily",
    "longname": "module:daily",
    "name": "daily",
    "kind": "module",
    "description": "Casino DailyCommand - Receive your daily 500 chips top up\n\n**Aliases**: `topup`, `bonus`",
    "category": "casino",
    "meta": {
      "lineno": 2,
      "filename": "daily.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "order": 11
  },
  {
    "id": "module:deposit",
    "longname": "module:deposit",
    "name": "deposit",
    "kind": "module",
    "description": "Casino DepositCommand - Deposit chips into your vault\n\n**Aliases**: `depo`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of chips to deposit",
        "name": "ChipsAmount"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "deposit.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "examples": [
      "deposit 100"
    ],
    "category": "casino",
    "order": 12
  },
  {
    "id": "module:give",
    "longname": "module:give",
    "name": "give",
    "kind": "module",
    "description": "Casino GiveCommand - Give another player some chips\n\n**Aliases**: `donate`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "The member you want to give some chips",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of chips you want to give",
        "name": "ChipsAmount"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "give.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "examples": [
      "give Favna 10"
    ],
    "category": "casino",
    "order": 13
  },
  {
    "id": "module:leaderboard",
    "longname": "module:leaderboard",
    "name": "leaderboard",
    "kind": "module",
    "description": "Casino LeaderboardCommand - Shows the top 5 ranking players for your server\n\n**Aliases**: `lb`, `casinolb`, `leaderboards`",
    "category": "casino",
    "meta": {
      "lineno": 2,
      "filename": "leaderboard.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "order": 14
  },
  {
    "id": "module:memberbalance",
    "longname": "module:memberbalance",
    "name": "memberbalance",
    "kind": "module",
    "description": "Casino MemberBalanceCommand - Retrieves the amount of chips another member has for the casino\n\n**Aliases**: `mbal`, `mcash`, `mbalance`, `mchips`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "Member to get the balance for",
        "name": "AnyMember"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "memberbalance.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "examples": [
      "mchips Rohul"
    ],
    "category": "casino",
    "order": 15
  },
  {
    "id": "module:slots",
    "longname": "module:slots",
    "name": "slots",
    "kind": "module",
    "description": "Casino SlotsCommand - Gamble your chips at the slot machine\n\n**Aliases**: `slot`, `fruits`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of chips you want to gamble",
        "name": "ChipsAmount"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "slots.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "examples": [
      "slots 5"
    ],
    "category": "casino",
    "order": 16
  },
  {
    "id": "module:weekly",
    "longname": "module:weekly",
    "name": "weekly",
    "kind": "module",
    "description": "Casino WeeklyCommand - Receive your weekly 3500 chips top up\n\n**Aliases**: `weeklytopup`, `weeklybonus`",
    "category": "casino",
    "meta": {
      "lineno": 2,
      "filename": "weekly.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "order": 17
  },
  {
    "id": "module:wheeloffortune",
    "longname": "module:wheeloffortune",
    "name": "wheeloffortune",
    "kind": "module",
    "description": "Casino WheelOfFortuneCommand - Gamble your chips at the wheel of fortune\n\n**Aliases**: `wheel`, `wof`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of chips you want to gamble",
        "name": "ChipsAmount"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "wheeloffortune.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "examples": [
      "wof 5"
    ],
    "category": "casino",
    "order": 18
  },
  {
    "id": "module:withdraw",
    "longname": "module:withdraw",
    "name": "withdraw",
    "kind": "module",
    "description": "Casino WithdrawCommand} - Withdraw chips from your vault\n\n**Aliases**: `wdraw`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of chips to withdraw",
        "name": "ChipsAmount"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "withdraw.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\casino"
    },
    "preserveName": true,
    "examples": [
      "withdraw 100"
    ],
    "category": "casino",
    "order": 19
  },
  {
    "id": "module:length",
    "longname": "module:length",
    "name": "length",
    "kind": "module",
    "description": "Converters LengthCommand - Convert various units of length\n\n**Aliases**: `weight`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of something to convert",
        "name": "AmountToConvert"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The unit to convert from",
        "name": "FromUnit"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The unit to convert to",
        "name": "ToUnit"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "length.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\converters"
    },
    "preserveName": true,
    "examples": [
      "length 1 gram pound"
    ],
    "category": "converters",
    "order": 20
  },
  {
    "id": "module:length",
    "longname": "module:length",
    "name": "length",
    "kind": "module",
    "description": "Converters MassCommand - Convert various units of mass\n\n**Aliases**: `height`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of something to convert",
        "name": "AmountToConvert"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The unit to convert from",
        "name": "FromUnit"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The unit to convert to",
        "name": "ToUnit"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "mass.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\converters"
    },
    "preserveName": true,
    "examples": [
      "length 1.7m f"
    ],
    "category": "converters",
    "order": 21
  },
  {
    "id": "module:math",
    "longname": "module:math",
    "name": "math",
    "kind": "module",
    "description": "Converters MathCommand - Take the effort out of calculations and let Ribbon do it for you\n\n**Aliases**: `maths`, `calc`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The equation to solve",
        "name": "Equation"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "math.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\converters"
    },
    "preserveName": true,
    "examples": [
      "math (pi - 1) * 3"
    ],
    "category": "converters",
    "order": 22
  },
  {
    "id": "module:oxr",
    "longname": "module:oxr",
    "name": "oxr",
    "kind": "module",
    "description": "Converters MoneyCommand - Convert one currency to another\n\nNote: bitcoin is BTC, Ethereum is ETH, Litecoin is LTC\n\nFor a full list of supported currencies see [this url](https://docs.openexchangerates.org/docs/supported-currencies)\n\n**Aliases**: `money`, `rate`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Amount of money to convert",
        "name": "MoneyAmount"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Currency to convert from",
        "name": "OriginCurrency"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Currency to convert to",
        "name": "TargetCurrency"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "oxr.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\converters"
    },
    "preserveName": true,
    "examples": [
      "oxr 1 EUR USD"
    ],
    "category": "converters",
    "order": 23
  },
  {
    "id": "module:temperature",
    "longname": "module:temperature",
    "name": "temperature",
    "kind": "module",
    "description": "Converters TemperatureCommand - Convert various units of temperature\n\n**Aliases**: `heat`, `warmth`, `temp`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of something to convert",
        "name": "AmountToConvert"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The unit to convert from",
        "name": "FromUnit"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The unit to convert to",
        "name": "ToUnit"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "temperature.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\converters"
    },
    "preserveName": true,
    "examples": [
      "temperature 20 c f"
    ],
    "category": "converters",
    "order": 24
  },
  {
    "id": "module:favna",
    "longname": "module:favna",
    "name": "favna",
    "kind": "module",
    "description": "Custom FavnaCommand - Custom Command exclusive to ChaosGamez server\n\nA joke command to praise Favna\nServer admins can disable this command entirely by using the `rmt off` command\n**Aliases**: `.favna`",
    "category": "custom",
    "meta": {
      "lineno": 2,
      "filename": "favna.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\custom"
    },
    "preserveName": true,
    "order": 25
  },
  {
    "id": "module:kai",
    "longname": "module:kai",
    "name": "kai",
    "kind": "module",
    "description": "Custom KaiCommand - Custom Command exclusive to ChaosGamez server\n\nA joke command to spite Kai. Server admins can disable this command entirely by using the `rmt off` command\n\n**Aliases**: `.kai`",
    "category": "custom",
    "meta": {
      "lineno": 2,
      "filename": "kai.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\custom"
    },
    "preserveName": true,
    "order": 26
  },
  {
    "id": "module:copypasta",
    "longname": "module:copypasta",
    "name": "copypasta",
    "kind": "module",
    "description": "Extra CopyPastaCommand - Sends a copypasta to the chat\n\nNote: It is possible to get copypastas with more than 2000 characters. Ask me to add it through my server!\n\n**Aliases**: `cp`, `pasta`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the copypasta to send",
        "name": "PastaName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "copypasta.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "copypasta navy"
    ],
    "category": "extra",
    "order": 27
  },
  {
    "id": "module:copypastaadd",
    "longname": "module:copypastaadd",
    "name": "copypastaadd",
    "kind": "module",
    "description": "Extra CopyPastaAddCommand - Adds a new copypasta for your server\n\n**Aliases**: `cpadd`, `pastaadd`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name for the new pasta",
        "name": "PasteName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Content for the new pasta",
        "name": "PastaContent"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "copypastaadd.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "copypastaadd lipsum Lorem ipsum dolor sit amet."
    ],
    "category": "extra",
    "order": 28
  },
  {
    "id": "module:copypastalist",
    "longname": "module:copypastalist",
    "name": "copypastalist",
    "kind": "module",
    "description": "Extra CopyPastaListCommand - Gets all copypastas available to the server\n\n**Aliases**: `cplist`, `copylist`, `pastalist`",
    "category": "extra",
    "meta": {
      "lineno": 2,
      "filename": "copypastalist.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "order": 29
  },
  {
    "id": "module:copypastaremove",
    "longname": "module:copypastaremove",
    "name": "copypastaremove",
    "kind": "module",
    "description": "Extra CopyPastaRemoveCommand - Remove a specified copypasta\n\nUse the copypastalist command to find the ID for deleting\n\n**Aliases**: `cpremove`, `copypastadelete`, `cpdelete`, `cpd`, `cpr`, `pastadelete`, `pasteremove`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the Copypasta to remove",
        "name": "CopyPastaID"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "copypastaremove.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "copypastaremove 1"
    ],
    "category": "extra",
    "order": 30
  },
  {
    "id": "module:qrgen",
    "longname": "module:qrgen",
    "name": "qrgen",
    "kind": "module",
    "description": "Extra QRGenCommand - Generates a QR code from text (like a URL)\n\n**Aliases**: `qr`, `qrcode`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL you want to encode into a QR image",
        "name": "URL"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "qrgen.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "qrgen https://favna.xyz/ribbon"
    ],
    "category": "extra",
    "order": 31
  },
  {
    "id": "module:randomcol",
    "longname": "module:randomcol",
    "name": "randomcol",
    "kind": "module",
    "description": "Extra RandomColCommand - Generates a random colour\n\nProviding a colour hex will display that colour, providing none will generate a random one\n\n**Aliases**: `randhex`, `rhex`, `randomcolour`, `randomcolor`, `randcol`, `randomhex`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Optional: colour hex to display",
        "name": "hex"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "randomcol.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "randomcol\n-OR-\nrandomcol #990000\n-OR-\nrandomcol 36B56e"
    ],
    "category": "extra",
    "order": 32
  },
  {
    "id": "module:remind",
    "longname": "module:remind",
    "name": "remind",
    "kind": "module",
    "description": "Extra RemindCommand - Set a reminder and Ribbon will remind you\n\nWorks by reminding you after a given amount of minutes, hours or days in the format of `5m`, `2h` or `1d`\n\n**Aliases**: `remindme`, `reminder`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Amount of time you want to be reminded in",
        "name": "Time"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Thing you want Ribbon to remind you of",
        "name": "Reminder"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "remind.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "remind 1h To continue developing Ribbon"
    ],
    "category": "extra",
    "order": 33
  },
  {
    "id": "module:say",
    "longname": "module:say",
    "name": "say",
    "kind": "module",
    "description": "Extra Say - Repeats a message and deletes your message\n\n**Aliases**: `sayd`, `repeat`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Message you want to have repeated",
        "name": "Text"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "say.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "say Favna is a great coder!"
    ],
    "category": "extra",
    "order": 34
  },
  {
    "id": "module:saywut",
    "longname": "module:saywut",
    "name": "saywut",
    "kind": "module",
    "description": "Extra SayWutCommand - Bust the last \"say\" user\n\n**Aliases**: `saywat`, `saywot`",
    "category": "extra",
    "meta": {
      "lineno": 2,
      "filename": "saywut.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "order": 35
  },
  {
    "id": "module:time",
    "longname": "module:time",
    "name": "time",
    "kind": "module",
    "description": "Extra Time - Gets the current time in any place\n\nUses Google's Geocoding to determine the correct location therefore supports any location indication, country, city\n    or even as exact as a street.\n\n**Aliases**: `citytime`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Place where you want to get the current time for",
        "name": "Location"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "time.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "time Amsterdam"
    ],
    "category": "extra",
    "order": 36
  },
  {
    "id": "module:translate",
    "longname": "module:translate",
    "name": "translate",
    "kind": "module",
    "description": "Extra TranslateCommand - Translate any word from any language to any other language\n\nLanguage specifications can be either 1 or 2 letter ISO 639 or full names\n\n**Aliases**: `tr`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The language to translate from",
        "name": "FromLanguage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The language to translate to",
        "name": "ToLanguage"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The word or text to translate",
        "name": "Text"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "translate.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "translate en nl Hello World"
    ],
    "category": "extra",
    "order": 37
  },
  {
    "id": "module:weather",
    "longname": "module:weather",
    "name": "weather",
    "kind": "module",
    "description": "Extra Weather - Get the current weather forecast in any city\n\nPotentially you'll have to specify city if the city is in multiple countries, i.e. `weather amsterdam` will not be\n    the same as `weather amsterdam missouri`\n\nUses Google's Geocoding to determine the correct location therefore supports any location indication, country, city\n    or even as exact as a street.\n\n**Aliases**: `temp`, `forecast`, `fc`, `wth`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the city to get the weather forecast for",
        "name": "CityName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "weather.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "weather Amsterdam"
    ],
    "category": "extra",
    "order": 38
  },
  {
    "id": "module:xkcd",
    "longname": "module:xkcd",
    "name": "xkcd",
    "kind": "module",
    "description": "Extra XKCDCommand - Gets a random image from xkcd\n\n**Aliases**: `devjoke`, `comicjoke`",
    "category": "extra",
    "meta": {
      "lineno": 2,
      "filename": "xkcd.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "order": 39
  },
  {
    "id": "module:zalgo",
    "longname": "module:zalgo",
    "name": "zalgo",
    "kind": "module",
    "description": "Extra ZalgoCommand - Create zalgo-fied text from your input\n\nFirst banishes any existing zalgo to ensure proper result\n\n**Aliases**: `trash`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Your input to transform with Zalgo",
        "name": "SomeText"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "zalgo.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\extra"
    },
    "preserveName": true,
    "examples": [
      "zalgo HE COMES"
    ],
    "category": "extra",
    "order": 40
  },
  {
    "id": "module:8ball",
    "longname": "module:8ball",
    "name": "8ball",
    "kind": "module",
    "description": "Games EightBallCommand - Rolls a magic 8 ball using your input\n\n**Aliases**: `eightball`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Question you want the 8 ball to answer",
        "name": "question"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "8ball.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\games"
    },
    "preserveName": true,
    "examples": [
      "8ball is Favna a genius coder?"
    ],
    "category": "games",
    "order": 41
  },
  {
    "id": "module:dice",
    "longname": "module:dice",
    "name": "dice",
    "kind": "module",
    "description": "Games DiceCommand - Rolls some dice with some sides. Great for the DnD players!\n\n**Aliases**: `xdicey`, `roll`, `dicey`, `die`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The amount of sides the dice should have",
        "name": "DiceSides"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The amount of dice to roll",
        "name": "AmountOfRolls"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "dice.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\games"
    },
    "preserveName": true,
    "examples": [
      "dice 5 6"
    ],
    "category": "games",
    "order": 42
  },
  {
    "id": "module:dndc",
    "longname": "module:dndc",
    "name": "dndc",
    "kind": "module",
    "description": "Games DndCCommand - Flips a coin\n\n**Aliases**: `coinflip`, `dndc`, `dcoin`",
    "category": "games",
    "meta": {
      "lineno": 2,
      "filename": "dndcoin.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\games"
    },
    "preserveName": true,
    "order": 43
  },
  {
    "id": "module:fight",
    "longname": "module:fight",
    "name": "fight",
    "kind": "module",
    "description": "Games FightCommand - Pit two things against each other in a fight to the death.\n\n**Aliases**: `combat`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The first combatant",
        "name": "FighterOne"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The second combatant",
        "name": "FighterTwo"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "fight.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\games"
    },
    "preserveName": true,
    "examples": [
      "fight Pyrrha Ruby"
    ],
    "category": "games",
    "order": 44
  },
  {
    "id": "module:rps",
    "longname": "module:rps",
    "name": "rps",
    "kind": "module",
    "description": "Games RockPaperScissorCommand - Play Rock Paper Scissors against random.org randomization\n\n**Aliases**: `rockpaperscissors`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The hand that you want to play",
        "name": "HandToPlay"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "rps.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\games"
    },
    "preserveName": true,
    "examples": [
      "rps Rock"
    ],
    "category": "games",
    "order": 45
  },
  {
    "id": "module:ship",
    "longname": "module:ship",
    "name": "ship",
    "kind": "module",
    "description": "Games ShipCommand - Ship 2 members\n\nLeaving 1 or both parameters out will have Ribbon randomly pick 1 or 2 members\n\n**Aliases**: `love`, `marry`, `engage`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The first member to ship",
        "name": "ShipMemberOne"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The second member to ship",
        "name": "ShipMemberTwo"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "ship.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\games"
    },
    "preserveName": true,
    "examples": [
      "ship Biscuit Rei"
    ],
    "category": "games",
    "order": 46
  },
  {
    "id": "module:strawpoll",
    "longname": "module:strawpoll",
    "name": "strawpoll",
    "kind": "module",
    "description": "Games StrawpollCommand - Create a strawpoll and find out what people really think (hopefully)\n\nHas a very specific syntax! Be sure to adapt the example!\n\n**Aliases**: `straw`, `poll`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The question that the strawpoll needs to answer. Recommended to wrap in `\" \"` (or\n    `' '`) to allow spaces",
        "name": "Question"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The options the strawpoll should have. Recommended to wrap in `\" \"` (or `' '`) to\n    allow spaces. Splits on every \\`|\\`",
        "name": "Options"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "strawpoll.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\games"
    },
    "preserveName": true,
    "examples": [
      "strawpoll 'Best RWBY girl?' 'Pyrrha Nikos' 'Ruby Rose'",
      "strawpoll 'Best coding language?' JavaScript C# C++"
    ],
    "category": "games",
    "order": 47
  },
  {
    "id": "module:activity",
    "longname": "module:activity",
    "name": "activity",
    "kind": "module",
    "description": "Info ActivityCommand - Gets the activity (presence) data from a member\n\n**Aliases**: `act`, `presence`, `richpresence`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "Member to get the activity for",
        "name": "member"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "activity.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "examples": [
      "activity Favna"
    ],
    "category": "info",
    "order": 48
  },
  {
    "id": "module:avatar",
    "longname": "module:avatar",
    "name": "avatar",
    "kind": "module",
    "description": "Games AvatarCommand - Get the avatar from any member on this server\n\n**Aliases**: `ava`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "Member to get the avatar from",
        "name": "MemberName"
      },
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "optional": true,
        "description": "Optional: Size of the avatar to get. Defaults to 1024",
        "name": "ImageSize"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "avatar.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "examples": [
      "avatar Favna"
    ],
    "category": "info",
    "order": 49
  },
  {
    "id": "module:discordbots",
    "longname": "module:discordbots",
    "name": "discordbots",
    "kind": "module",
    "description": "Info DiscordBotsCommand - Gets the stats from a bot listed on DiscordBotList\n\n**Aliases**: `dbapi`, `db`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "the user ID of the bot you want to get info about",
        "name": "BotID"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "discordbots.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "examples": [
      "discordbots 512150391471996930"
    ],
    "category": "info",
    "order": 50
  },
  {
    "id": "module:emotes",
    "longname": "module:emotes",
    "name": "emotes",
    "kind": "module",
    "description": "Info EmotesCommand - Lists all emotes from the server\n\n**Aliases**: `listemo`, `emolist`, `listemoji`, `emote`, `emojis`, `emoji`",
    "category": "info",
    "meta": {
      "lineno": 2,
      "filename": "emotes.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "order": 51
  },
  {
    "id": "module:iam",
    "longname": "module:iam",
    "name": "iam",
    "kind": "module",
    "description": "Info IamCommand - Self Assign roles\n\n**Aliases**: `self`",
    "params": [
      {
        "type": {
          "names": [
            "RoleResolvable"
          ]
        },
        "description": "The role you want to assign to yourself",
        "name": "AnyRole"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "iam.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "examples": [
      "iam uploader"
    ],
    "category": "info",
    "order": 52
  },
  {
    "id": "module:iamnot",
    "longname": "module:iamnot",
    "name": "iamnot",
    "kind": "module",
    "description": "Info IamNotCommand - Remove self assigned roles\n\n**Aliases**: `notself`, `iamn`",
    "params": [
      {
        "type": {
          "names": [
            "RoleResolvable"
          ]
        },
        "description": "The role you want to remove from yourself",
        "name": "AnyRole"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "iamnot.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "examples": [
      "iamnot uploader"
    ],
    "category": "info",
    "order": 53
  },
  {
    "id": "module:invite",
    "longname": "module:invite",
    "name": "invite",
    "kind": "module",
    "description": "Info InviteCommand - Gets the invite link for the bot\n\n**Aliases**: `inv`, `links`, `shill`",
    "category": "info",
    "meta": {
      "lineno": 2,
      "filename": "invite.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "order": 54
  },
  {
    "id": "module:Reddit",
    "longname": "module:Reddit",
    "name": "Reddit",
    "kind": "module",
    "description": "Info RedditCommand - Gets statistics on a Reddit user\n**Aliases**: `red`, `redditor`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The Reddit user you want to look up",
        "name": "RedditUser"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "reddit.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "examples": [
      "reddit favna"
    ],
    "category": "info",
    "order": 55
  },
  {
    "id": "module:server",
    "longname": "module:server",
    "name": "server",
    "kind": "module",
    "description": "Info ServerInfoCommand - Gets information about the current server\n\n**Aliases**: `serverinfo`, `sinfo`",
    "category": "info",
    "meta": {
      "lineno": 2,
      "filename": "server.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "order": 56
  },
  {
    "id": "module:stats",
    "longname": "module:stats",
    "name": "stats",
    "kind": "module",
    "description": "Info RibbonStatsCommand - Statistics about Ribbon\n\n**Aliases**: `botinfo`, `info`",
    "category": "info",
    "meta": {
      "lineno": 2,
      "filename": "stats.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "order": 57
  },
  {
    "id": "module:userinfo",
    "longname": "module:userinfo",
    "name": "userinfo",
    "kind": "module",
    "description": "Info UserInfoCommand - Get the info of any member on this server\n**Aliases**: `user`, `uinfo`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "Member you want to get info about",
        "name": "AnyMember"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "userinfo.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\info"
    },
    "preserveName": true,
    "examples": [
      "userinfo Favna"
    ],
    "category": "info",
    "order": 58
  },
  {
    "id": "module:fortnite",
    "longname": "module:fortnite",
    "name": "fortnite",
    "kind": "module",
    "description": "Leaderboards FortniteCommand - Get Player Statistics from Fortnite\n\n**Aliases**: `fort`, `fortshite`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The Epic Username of the player you want to find",
        "name": "Username"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The platform the player plays on (pc, xbox or psn)",
        "name": "Platform"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "fortnite.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\leaderboards"
    },
    "preserveName": true,
    "examples": [
      "fortnite darkentz014 pc"
    ],
    "category": "leaderboards",
    "order": 59
  },
  {
    "id": "module:osu",
    "longname": "module:osu",
    "name": "osu",
    "kind": "module",
    "description": "Leaderboards OsuCommand - Shows Player Stats for a given OSU player\n\n**Aliases**: `osustats`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the OSU player",
        "name": "PlayerName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "osu.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\leaderboards"
    },
    "preserveName": true,
    "examples": [
      "osu WubWoofWolf"
    ],
    "category": "leaderboards",
    "order": 60
  },
  {
    "id": "module:overwatch",
    "longname": "module:overwatch",
    "name": "overwatch",
    "kind": "module",
    "description": "Leaderboards OverwatchCommand - Shows Player Stats for a given BattleNet BattleTag\n\n**Aliases**: `owstats`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "BattleTag for that overwatch player",
        "name": "BattleTag"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Optiona: The platform the player is on. One of pc, psn or xbl",
        "name": "platform"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Optional: The region the player plays in. Of of us, eu, asia",
        "name": "region"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "overwatch.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\leaderboards"
    },
    "preserveName": true,
    "examples": [
      "overwatch Camoflouge#1267"
    ],
    "category": "leaderboards",
    "order": 61
  },
  {
    "id": "module:pubg",
    "longname": "module:pubg",
    "name": "pubg",
    "kind": "module",
    "description": "Leaderboards PubgCommand - Get statistics from a PUBG account",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The username you want to find statistics for",
        "name": "PubgUsername"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A combination of platform and region to look through, for example `pc-na` for PC in\n    North America",
        "name": "Shard"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "pubg.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\leaderboards"
    },
    "preserveName": true,
    "examples": [
      "pubg shroud pc-na"
    ],
    "category": "leaderboards",
    "order": 62
  },
  {
    "id": "module:showdown",
    "longname": "module:showdown",
    "name": "showdown",
    "kind": "module",
    "description": "Leaderboards ShowdownCommand - Show the top ranking players in your tier of choice\n\n**Aliases**: `showdownlb`, `pokelb`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the tier to view the leaderboard for",
        "name": "TierName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "showdown.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\leaderboards"
    },
    "preserveName": true,
    "examples": [
      "showdown ou"
    ],
    "category": "leaderboards",
    "order": 63
  },
  {
    "id": "module:addrole",
    "longname": "module:addrole",
    "name": "addrole",
    "kind": "module",
    "description": "Moderation AddRoleCommand - Add a role to a member\n\n**Aliases**: `newrole`, `ar`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "Member to give a role",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "RoleResolvable"
          ]
        },
        "description": "Role to give",
        "name": "AnyRole"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "addrole.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "addrole Favna Member"
    ],
    "category": "moderation",
    "order": 64
  },
  {
    "id": "module:announce",
    "longname": "module:announce",
    "name": "announce",
    "kind": "module",
    "description": "Moderation NewsCommand - Make an announcement to a channel named \"announcements\" or \"news\"\n\n**Aliases**: `news`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The announcement you want to make",
        "name": "Announcement"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "announce.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "announce Pokemon Switch has released!"
    ],
    "category": "moderation",
    "order": 65
  },
  {
    "id": "module:automod",
    "longname": "module:automod",
    "name": "automod",
    "kind": "module",
    "description": "Moderation AutomodCommand - General toggle for all automod features\n\n**Aliases**: `botmod`, `skynetmod`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "RoleResolvable"
          ]
        },
        "optional": true,
        "description": "Roles that are exempted from automod",
        "name": "Roles"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "automod.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "automod enable"
    ],
    "category": "moderation",
    "order": 66
  },
  {
    "id": "module:ban",
    "longname": "module:ban",
    "name": "ban",
    "kind": "module",
    "description": "Moderation BanCommand - Ban a bad member\n\n**Aliases**: `b`, `banana`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "The member to ban from the server",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Reason for this banishment. Include `--no-delete` anywhere in the reason to\n    prevent Ribbon from deleting the banned member's messages",
        "name": "TheReason"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "ban.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "ban MultiMegaMander"
    ],
    "category": "moderation",
    "order": 67
  },
  {
    "id": "module:casinolimit",
    "longname": "module:casinolimit",
    "name": "casinolimit",
    "kind": "module",
    "description": "Moderation CasinoLimitCommand - Configure what the upper limit for any casino command should be\n\n**Aliases**: `cl`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The new upper limit to set",
        "name": "UpperLimit"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Optional: The new lower limit",
        "name": "LowerLimit"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "casinolimit.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "casinolimit 20000",
      "casinolimit 20000 1000"
    ],
    "category": "moderation",
    "order": 68
  },
  {
    "id": "module:confmute",
    "longname": "module:confmute",
    "name": "confmute",
    "kind": "module",
    "description": "Moderation ConfigureMuteCommand - Configure which role to use as \"mute\" role\n\n**Aliases**: `cm`, `configmute`",
    "params": [
      {
        "type": {
          "names": [
            "RoleResolvable"
          ]
        },
        "description": "Role to set as mute role",
        "name": "Role"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "confmute.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "confmute mute"
    ],
    "category": "moderation",
    "order": 69
  },
  {
    "id": "module:countdownadd",
    "longname": "module:countdownadd",
    "name": "countdownadd",
    "kind": "module",
    "description": "Moderation CountdownAddCommand - Store a countdown message\n\nCountdown messages are sent every 24 hours in a given channel and count down to a certain event\n\nFor the date you should not have any spaces and it is strongly recommended to use [ISO\n    8601](https://en.wikipedia.org/wiki/ISO_8601)\n\nThey will automatically get deleted when the event time is reached\n\nOptionally, you can make Ribbon tag @everyone or @here when the event time is reached by adding \\`--everyone\\` or\n    \\`--here\\` anywhere in the countdown content\n\nYou can save multiple messages for varying events and channels by using this command multiple times\n\nThe first time the message will be send is the next periodic check Ribbon will do (which is every 3 minutes) after\n    adding the countdown\n\n**Aliases**: `countdownmsg`, `countdownmessage`, `countdown`, `cam`, `cdadd`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The date (and time) of the event",
        "name": "DateTime"
      },
      {
        "type": {
          "names": [
            "ChannelResolvable"
          ]
        },
        "description": "The channel to send countdown reminders in",
        "name": "Channel"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The message to repeat",
        "name": "Message"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "countdownadd.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "countdownadd 2018-12-31T18:00 #general New years day!"
    ],
    "category": "moderation",
    "order": 70
  },
  {
    "id": "module:countdownlist",
    "longname": "module:countdownlist",
    "name": "countdownlist",
    "kind": "module",
    "description": "Moderation CountDownList - List all stored countdown messages in the current guild\n\n**Aliases**: `cl`, `cdlist`",
    "category": "moderation",
    "meta": {
      "lineno": 2,
      "filename": "countdownlist.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "order": 71
  },
  {
    "id": "module:countdownremove",
    "longname": "module:countdownremove",
    "name": "countdownremove",
    "kind": "module",
    "description": "Moderation CountDownRemove - Remove a specified countdown\n\nUse the countdownlist command to find the ID for deleting\n\n**Aliases**: `cdremove`, `countdowndelete`, `cddelete`, `cdd`, `cdr`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the Countdown to remove",
        "name": "CountdownID"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "countdownremove.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "countdownremove 1"
    ],
    "category": "moderation",
    "order": 72
  },
  {
    "id": "module:defaultrole",
    "longname": "module:defaultrole",
    "name": "defaultrole",
    "kind": "module",
    "description": "Moderation DefaultroleCommand - Sets a default role that should be assigned to all new joining members\n\n**Aliases**: `defrole`",
    "params": [
      {
        "type": {
          "names": [
            "RoleResolvable"
          ]
        },
        "description": "Role to assign to all new joining members",
        "name": "AnyRole"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "defaultrole.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "defaultrole Member"
    ],
    "category": "moderation",
    "order": 73
  },
  {
    "id": "module:deletecommandmessages",
    "longname": "module:deletecommandmessages",
    "name": "deletecommandmessages",
    "kind": "module",
    "description": "Moderation DeleteCommandMessagesCommand - Configure whether Ribbon should delete command messages\n\n**Aliases**: `dcm`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "deletecommandmessages.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "deletecommandmessages enable"
    ],
    "category": "moderation",
    "order": 74
  },
  {
    "id": "module:deletewarn",
    "longname": "module:deletewarn",
    "name": "deletewarn",
    "kind": "module",
    "description": "Moderation DeleteWarnCommand - Deletes all or some warnings points from a user\n\n**Aliases**: `removewarn`, `unwarn`, `dw`, `uw`",
    "params": [
      {
        "type": {
          "names": [
            "MemberResolvable"
          ]
        },
        "description": "The member to remove warning points from",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "The amount of warning points to remove",
        "name": "AmountOfWarnPoints"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "deletewarn.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "deletewarn favna",
      "deletewarn favna"
    ],
    "category": "moderation",
    "order": 75
  },
  {
    "id": "module:delrole",
    "longname": "module:delrole",
    "name": "delrole",
    "kind": "module",
    "description": "Moderation DeleteRoleCommand - Delete the role of a member\n\n**Aliases**: `deleterole`, `dr`, `remrole`, `removerole`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "The member to remove a role from",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "RoleResolvable"
          ]
        },
        "description": "The role to remove",
        "name": "AnyRole"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "delrole.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "delrole Favna Member"
    ],
    "category": "moderation",
    "order": 76
  },
  {
    "id": "module:joinmessages",
    "longname": "module:joinmessages",
    "name": "joinmessages",
    "kind": "module",
    "description": "Moderation JoinMessagesCommand - Toggle whether Ribbon should send special greeting messages when members join\n\n**Aliases**: `jmt`, `joinmessagestoggle`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "TextChannel"
          ]
        },
        "optional": true,
        "description": "TextChannel the Join Message is sent to, required when enabling",
        "name": "Channel"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "joinmessages.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "joinmessages enable"
    ],
    "category": "moderation",
    "order": 77
  },
  {
    "id": "module:kick",
    "longname": "module:kick",
    "name": "kick",
    "kind": "module",
    "description": "Moderation KickCommand - Kicks a somewhat bad member\n\n**Aliases**: `k`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "The member to kick from the server",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Reason for this kick.",
        "name": "TheReason"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "kick.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "kick ThunderKai"
    ],
    "category": "moderation",
    "order": 78
  },
  {
    "id": "module:leavemessages",
    "longname": "module:leavemessages",
    "name": "leavemessages",
    "kind": "module",
    "description": "Moderation LeaveMessagesCommand - Toggle whether Ribbon should send special leave messages when members leave\n\n**Aliases**: `lmt`, `leavemessagestoggle`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "TextChannel"
          ]
        },
        "optional": true,
        "description": "TextChannel the Leave Message is sent to, required when enabling",
        "name": "Channel"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "leavemessages.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "leavemessages enable"
    ],
    "category": "moderation",
    "order": 79
  },
  {
    "id": "module:listwarn",
    "longname": "module:listwarn",
    "name": "listwarn",
    "kind": "module",
    "description": "Moderation ListWarnCommand - Show the amount of warning points a member has\n\n**Aliases**: `reqwarn`, `lw`, `rw`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "The member of whom to list the warning points",
        "name": "AnyMember"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "listwarn.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "listwarn Biscuit"
    ],
    "category": "moderation",
    "order": 80
  },
  {
    "id": "module:lockdown",
    "longname": "module:lockdown",
    "name": "lockdown",
    "kind": "module",
    "description": "Moderation LockdownCommand - Lockdown a channel\n\nOnce locked it will be locked to the `@everyone` or whichever role you specified.\n\nDepending on your permissions setup it may be that only people with the `administrator` role will have access to the\n    channel.\n\nThis may also mean that Ribbon won't have access if it doesn't have administrator role so you cannot use the\n    `unlock` command until you give it that permission!\n\n**Aliases**: `lock`, `ld`",
    "meta": {
      "lineno": 2,
      "filename": "lockdown.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "params": [
      {
        "type": {
          "names": [
            "RoleResolvable"
          ]
        },
        "optional": true,
        "description": "Optional: A role the lockdown is applied to, defaults to @everyone",
        "name": "LockRole"
      }
    ],
    "category": "moderation",
    "order": 81
  },
  {
    "id": "module:memberlogs",
    "longname": "module:memberlogs",
    "name": "memberlogs",
    "kind": "module",
    "description": "Moderation MemberLogsCommand - Toggle member logs in the configured channel\n\n**Aliases**: `tml`, `togglemember`, `togglememberlogs`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "TextChannel"
          ]
        },
        "optional": true,
        "description": "TextChannel the Member Logs are sent to, required when enabling",
        "name": "Channel"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "memberlogs.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "memberlogs enable"
    ],
    "category": "moderation",
    "order": 82
  },
  {
    "id": "module:modlogs",
    "longname": "module:modlogs",
    "name": "modlogs",
    "kind": "module",
    "description": "Moderation ModLogsCommand - Toggle mod logs in the configured channel\n\n**Aliases**: `togglemod`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      },
      {
        "type": {
          "names": [
            "TextChannel"
          ]
        },
        "optional": true,
        "description": "TextChannel the Mod Logs are sent to, required when enabling",
        "name": "Channel"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "modlogs.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "modlogs enable"
    ],
    "category": "moderation",
    "order": 83
  },
  {
    "id": "module:mute",
    "longname": "module:mute",
    "name": "mute",
    "kind": "module",
    "description": "Moderation MuteCommand - Mute a member\n\nRequires either a role named `muted` on the server, or first having set the mute role with confmute\n\nYou can optionally specify a duration for how long this mute will last. Not specifying any will mean it will last\nuntil manually unmuted.\n\nThe format for duration is in minutes, hours or days in the format of `5m`, `2h` or `1d`\n\n**Aliases**: `silent`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "Member to mute",
        "name": "AnyMember"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "mute.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "mute Muffin"
    ],
    "category": "moderation",
    "order": 84
  },
  {
    "id": "module:nickname",
    "longname": "module:nickname",
    "name": "nickname",
    "kind": "module",
    "description": "Moderation NickCommand - Nickname a single member\n\n**Aliases**: `nick`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "Member to give a nickname",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Nickname to assign",
        "name": "NewNickname"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "nickname.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "nick Muffin Cupcake"
    ],
    "category": "moderation",
    "order": 85
  },
  {
    "id": "module:purge",
    "longname": "module:purge",
    "name": "purge",
    "kind": "module",
    "description": "Moderation PurgeCommand - Quickly delete a certain amount of messages\n\n**Aliases**: `prune`, `delete`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of messages to delete, between 1 and 99",
        "name": "MessageAmount"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "purge.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "purge 10"
    ],
    "category": "moderation",
    "order": 86
  },
  {
    "id": "module:regexmatchtoggle",
    "longname": "module:regexmatchtoggle",
    "name": "regexmatchtoggle",
    "kind": "module",
    "description": "Moderation RegexMatchToggleCommand - Toggle commands matching on regex for this server\n\n**Aliases**: `rmt`, `regexmatch`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "regexmatchtoggle.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "regexmatchtoggle enable"
    ],
    "category": "moderation",
    "order": 87
  },
  {
    "id": "module:selfroles",
    "longname": "module:selfroles",
    "name": "selfroles",
    "kind": "module",
    "description": "Moderation SelfRolesCommand - Sets the self assignable roles for the server members, to be used by the `iam`\n    command\n\nYou can set multiple roles by delimiting with spaces (`role1 role2`)\n\nYou can clear the setting by giving no roles then replying `finish`\n\n**Aliases**: `sroles`",
    "params": [
      {
        "type": {
          "names": [
            "RoleResolvable"
          ]
        },
        "optional": true,
        "description": "Role to set, can be multiple split by spaces",
        "name": "AnyRole"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "selfroles.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "selfroles uploader",
      "selfroles uploader superuploader"
    ],
    "category": "moderation",
    "order": 88
  },
  {
    "id": "module:setannounce",
    "longname": "module:setannounce",
    "name": "setannounce",
    "kind": "module",
    "description": "Moderation SetAnnounceCommand - Set the channel for the announce command\n\n**Aliases**: `sa`, `setannouncement`, `setannouncements`",
    "params": [
      {
        "type": {
          "names": [
            "ChannelResolvable"
          ]
        },
        "description": "The channel to set the announcements to",
        "name": "AnnounceChannel"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "setannounce.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "setannounce #updates"
    ],
    "category": "moderation",
    "order": 89
  },
  {
    "id": "module:setnonexplicitblock",
    "longname": "module:setnonexplicitblock",
    "name": "setnonexplicitblock",
    "kind": "module",
    "description": "Moderation SetNonExplicitBlockCommand - Toggle whether the bot should block non explicit commands or not\n\nSome commands can potentially give NSFW results, however they do not show NSFW images (for example, certain definitions on Urban Dictionary).\n    These type of commands are considered non explicit, as opposed to full nsfw commands.\n    By default these commands are blocked outside of NSFW channels, however at staff\n    digression they can be allowed outside of NSFW channels by toggling this option off\n\n**Aliases**: `sub`, `sneb`, `seb`, `allowub`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "On or Off",
        "name": "Option"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "setnonexplicitblock.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "setnonexplicitblock off"
    ],
    "category": "moderation",
    "order": 90
  },
  {
    "id": "module:softban",
    "longname": "module:softban",
    "name": "softban",
    "kind": "module",
    "description": "Moderation SoftbanCommand - Bans a member deleting their messages and then unbans them allowing them to rejoin\n    (no invite link is shared)\n\nThis is essentially a kick with the added effect of deleting all their past messages from the last 24 hours\n\n**Aliases**: `sb`, `sban`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "The member to softban from the server",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Reason for this softban.",
        "name": "TheReason"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "softban.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "softban ImmortalZypther"
    ],
    "category": "moderation",
    "order": 91
  },
  {
    "id": "module:tempban",
    "longname": "module:tempban",
    "name": "tempban",
    "kind": "module",
    "description": "Moderation TempBanCommand - Temporary bans a member, then unbans them when the timer expires\n\nGiven amount of minutes, hours or days in the format of `5m`, `2h` or `1d`\n\n**Aliases**: `tb`, `rottenbanana`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "The member to ban from the server",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The amount of time this member should be banned",
        "name": "Time"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Reason for this banishment. Include `--no-delete` anywhere in the reason to\n    prevent Ribbon from deleting the banned member's messages",
        "name": "TheReason"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "tempban.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "tempban Kai"
    ],
    "category": "moderation",
    "order": 92
  },
  {
    "id": "module:timeradd",
    "longname": "module:timeradd",
    "name": "timeradd",
    "kind": "module",
    "description": "Moderation TimerAddCommand - Store timed messages\n\nThese are messages Ribbon will repeat in a given channel on a given interval\n\nUseful for repeating about rules and such\n\nYou can save multiple messages with varying intervals and channels by using this command multiple times\n\nThe first time the message will be send is the next periodic check Ribbon will do (which is every 3 minutes) after\n    adding the timed message\n\nThe format for the interval is in minutes, hours or days in the format of `5m`, `2h` or `1d`\n\n**Aliases**: `timedmsgs`, `timedmsg`, timedmessages`, `timer`, `tm`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The interval at which the message(s) should be repeated",
        "name": "Interval"
      },
      {
        "type": {
          "names": [
            "ChannelResolvable"
          ]
        },
        "description": "The channel to send the timed message in",
        "name": "Channel"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The message(s) to repeat",
        "name": "Message"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "timeradd.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "timeradd 1d #general Please read the rules everyone!"
    ],
    "category": "moderation",
    "order": 93
  },
  {
    "id": "module:timerlist",
    "longname": "module:timerlist",
    "name": "timerlist",
    "kind": "module",
    "description": "Moderation TimerListCommand - List all stored timed messages in the current guild\n\n**Aliases**: `tl`, `timelist`",
    "category": "moderation",
    "meta": {
      "lineno": 2,
      "filename": "timerlist.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "order": 94
  },
  {
    "id": "module:timerremove",
    "longname": "module:timerremove",
    "name": "timerremove",
    "kind": "module",
    "description": "Moderation TimerRemoveCommand - Remove a specified timed message\n\nUse the timerlist command to find the ID for deleting\n\n**Aliases**: `timeremove`, `timerdelete`, `timedelete`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The ID of the timed message to remove",
        "name": "TimerID"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "timerremove.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "timerremove 1"
    ],
    "category": "moderation",
    "order": 95
  },
  {
    "id": "module:unknownmessages",
    "longname": "module:unknownmessages",
    "name": "unknownmessages",
    "kind": "module",
    "description": "Moderation UnknownMessagesCommand - Toggle Unknown Command messages on or off\n\n**Aliases**: `unknowns`, `unkmsg`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "unknownmessages.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "unknownmessages enable"
    ],
    "category": "moderation",
    "order": 96
  },
  {
    "id": "module:unlock",
    "longname": "module:unlock",
    "name": "unlock",
    "kind": "module",
    "description": "Moderation UnlockCommand - Unlock the channel\nOnly really useful if you previously locked the channel\n\nNote that Ribbon does need to be able to be able to access this channel to unlock it (read permissions)\n\n**Aliases**: `delock`, `ul`",
    "category": "moderation",
    "meta": {
      "lineno": 2,
      "filename": "unlock.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "order": 97
  },
  {
    "id": "module:unmute",
    "longname": "module:unmute",
    "name": "unmute",
    "kind": "module",
    "description": "Moderation UnmuteCommand - Unmutes a previously muted member\n**Aliases**: `um`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "The member to remove a role from",
        "name": "AnyMember"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "unmute.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "unmute Muffin"
    ],
    "category": "moderation",
    "order": 98
  },
  {
    "id": "module:warn",
    "longname": "module:warn",
    "name": "warn",
    "kind": "module",
    "description": "Moderation WarnCommand - Gives a member warning points\n\nPlease note that Ribbon will not auto ban when the member has a certain amount of points!\n\n**Aliases**: `warning`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "The member to give warning points",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of warning points to give",
        "name": "WarningPoints"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Reason for warning",
        "name": "TheReason"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "warn.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\moderation"
    },
    "preserveName": true,
    "examples": [
      "warn Biscuit 5 Not giving everyone cookies"
    ],
    "category": "moderation",
    "order": 99
  },
  {
    "id": "module:defaultvolume",
    "longname": "module:defaultvolume",
    "name": "defaultvolume",
    "kind": "module",
    "description": "Music DefaultVolumeCommand - Sets the server's default volume\n\n**Aliases**: `defvol`",
    "params": [
      {
        "type": {
          "names": [
            "number/\"show\""
          ]
        },
        "optional": true,
        "description": "The volume to set or use \"show\" to show current default volume",
        "name": "VolumeToSet"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "defaultvolume.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "examples": [
      "defaultvolume 2"
    ],
    "category": "music",
    "order": 100
  },
  {
    "id": "module:launch",
    "longname": "module:launch",
    "name": "launch",
    "kind": "module",
    "description": "Music LaunchMusicCommand - Starts playing music\n\nYou need to be in a voice channel before you can use this command and Ribbon needs to be allowed to join that channel as well as speak in it.\nIf music is already playing this will add to the queue or otherwise it will join your voice channel and start playing.\nThere are 4 ways to queue songs.\n1. YouTube Search Query\n2. YouTube video URL\n3. YouTube playlist URL\n4. YouTube video ID\n\n**Aliases**: `add`, `enqueue`, `start`, `join`, `play`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "One of the options linking to a video to play",
        "name": "Video"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "launch.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "examples": [
      "play final fantasy one winged angel"
    ],
    "category": "music",
    "order": 101
  },
  {
    "id": "module:maxlength",
    "longname": "module:maxlength",
    "name": "maxlength",
    "kind": "module",
    "description": "Music MaxLengthCommand - Set the maximum length (in minutes) of a video\n\nGive no argument to show current amount of maximum songs. Use \"default\" as argument to set it back to Ribbon's\n    default\n\n**Aliases**: `max-duration`, `max-song-length`, `max-song-duration`",
    "params": [
      {
        "type": {
          "names": [
            "number",
            "\"default\""
          ]
        },
        "optional": true,
        "description": "New maximum length in minutes",
        "name": "MaxVideoLength"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "maxlength.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "examples": [
      "maxlength 10"
    ],
    "category": "music",
    "order": 102
  },
  {
    "id": "module:maxsongs",
    "longname": "module:maxsongs",
    "name": "maxsongs",
    "kind": "module",
    "description": "Music MaxSongsCommand- The maximum amount of songs any member can queue\n\nGive no argument to show current amount of maximum songs. Use \"default\" as argument to set it back to Ribbon's\n    default\n\n**Aliases**: `songcap`, `songmax`, `maxsong`",
    "params": [
      {
        "type": {
          "names": [
            "number",
            "\"default\""
          ]
        },
        "optional": true,
        "description": "New maximum number of songs",
        "name": "NumberOfSongs"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "maxsongs.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "examples": [
      "maxsongs 2"
    ],
    "category": "music",
    "order": 103
  },
  {
    "id": "module:pause",
    "longname": "module:pause",
    "name": "pause",
    "kind": "module",
    "description": "Music PauseSongCommand - Pauses the currently playing track\n\nYou need to be in a voice channel before you can use this command\n\n**Aliases**: `shh`, `shhh`, `shhhh`, `shhhhh`, `hush`, `halt`",
    "category": "music",
    "meta": {
      "lineno": 2,
      "filename": "pause.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "order": 104
  },
  {
    "id": "module:queue",
    "longname": "module:queue",
    "name": "queue",
    "kind": "module",
    "description": "Music ViewQueueCommand - Shows the current queue of songs\n\nSongs are paginated in sets of 5\n\n**Aliases**: `songs`, `song-list`, `list`, `listqueue`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Page to show",
        "name": "Page"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "queue.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "examples": [
      "queue 2"
    ],
    "category": "music",
    "order": 105
  },
  {
    "id": "module:resume",
    "longname": "module:resume",
    "name": "resume",
    "kind": "module",
    "description": "Music ResumeSongCommand - Resumes the song after pausing it\n\nYou need to be in a voice channel before you can use this command\n\n**Aliases**: `go`, `continue`, `ale`, `loss`, `res`",
    "category": "music",
    "meta": {
      "lineno": 2,
      "filename": "resume.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "order": 106
  },
  {
    "id": "module:save",
    "longname": "module:save",
    "name": "save",
    "kind": "module",
    "description": "Music SaveQueueCommand - DMs the 10 upcoming songs from the queue to the user\n\n**Aliases**: `save-songs`, `save-song-list`, `ss`, `savequeue`",
    "category": "music",
    "meta": {
      "lineno": 2,
      "filename": "save.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "order": 107
  },
  {
    "id": "module:queue",
    "longname": "module:queue",
    "name": "queue",
    "kind": "module",
    "description": "Music ShuffleCommand - Shuffles the current queue\n\nShuffles using a [modern version of the Fisher-Yates shuffle\n    algorithm](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle#The_modern_algorithm)\n\n**Aliases**: `remix`, `mixtape`",
    "meta": {
      "lineno": 2,
      "filename": "shuffle.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "examples": [
      "queue 2"
    ],
    "category": "music",
    "order": 108
  },
  {
    "id": "module:skip",
    "longname": "module:skip",
    "name": "skip",
    "kind": "module",
    "description": "Music SkipSongCommand - Skips the currently playing song and jumps to the next in queue or stops if it is the\n    last song of the queue\n\nA vote to skip is started if there are 4 or more people in the voice channel with `(amount of members) / 3` as\n    required amount of votes (bot doesn't count as a member). Staff that can delete messages can force the skip by\n    using `skip force. You need to be in a voice channel before you can use this command.\n\n**Aliases**: `next`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Force the skip if you are the requester or a server moderator",
        "name": "force"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "skip.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "examples": [
      "skip\n-OR-\nskip force"
    ],
    "category": "music",
    "order": 109
  },
  {
    "id": "module:status",
    "longname": "module:status",
    "name": "status",
    "kind": "module",
    "description": "Music MusicStatusCommand - Gets status about the currently playing song\n\n**Aliases**: `song`, `playing`, `current-song`, `now-playing`",
    "category": "music",
    "meta": {
      "lineno": 2,
      "filename": "status.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "order": 110
  },
  {
    "id": "module:stop",
    "longname": "module:stop",
    "name": "stop",
    "kind": "module",
    "description": "Music StopMusicCommand - Stops the current queue. Bot will automatically leave the channel after this command\n\nA vote to skip is started if there are 4 or more people in the voice channel with `(amount of members) / 3` as\n    required amount of votes (bot doesn't count as a member). Staff that can delete messages can force the skip by\n    using `skip force`. You need to be in a voice channel before you can use this command.\n\n**Aliases**: `kill`, `stfu`, `quit`, `leave`, `disconnect`",
    "category": "music",
    "meta": {
      "lineno": 2,
      "filename": "stop.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "order": 111
  },
  {
    "id": "module:volume",
    "longname": "module:volume",
    "name": "volume",
    "kind": "module",
    "description": "Music ChangeVolumeCommand - Changes the volume of the currently playing song\n\nIf you do not give any parameter, Ribbon will show the current volume.\nYou need to be in a voice channel before you can use this command\n\n**Aliases**: `set-volume`, `set-vol`, `vol`",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "The new volume to set",
        "name": "Volume"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "volume.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\music"
    },
    "preserveName": true,
    "examples": [
      "volume 2"
    ],
    "category": "music",
    "order": 112
  },
  {
    "id": "module:e621",
    "longname": "module:e621",
    "name": "e621",
    "kind": "module",
    "description": "nsfw E621Command - Gets a NSFW image from e621\n\nCan only be used in NSFW marked channels!\n\n**Aliases**: `eee`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Something you want to find",
        "name": "Query"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "e621.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\nsfw"
    },
    "preserveName": true,
    "examples": [
      "e621 pyrrha_nikos"
    ],
    "category": "nsfw",
    "order": 113
  },
  {
    "id": "module:gelbooru",
    "longname": "module:gelbooru",
    "name": "gelbooru",
    "kind": "module",
    "description": "nsfw GelbooruCommand - Gets a NSFW image from gelbooru\n\nCan only be used in NSFW marked channels!\n\n**Aliases**: `gel`, `booru`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Something you want to find",
        "name": "Query"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "gelbooru.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\nsfw"
    },
    "preserveName": true,
    "examples": [
      "gelbooru pyrrha_nikos"
    ],
    "category": "nsfw",
    "order": 114
  },
  {
    "id": "module:paheal",
    "longname": "module:paheal",
    "name": "paheal",
    "kind": "module",
    "description": "nsfw PahealCommand - Gets a NSFW image from paheal\n\nCan only be used in NSFW marked channels!\n\n**Aliases**: `pa`, `heal`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Something you want to find",
        "name": "Query"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "paheal.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\nsfw"
    },
    "preserveName": true,
    "examples": [
      "paheal pyrrha_nikos"
    ],
    "category": "nsfw",
    "order": 115
  },
  {
    "id": "module:pornvids",
    "longname": "module:pornvids",
    "name": "pornvids",
    "kind": "module",
    "description": "nsfw PornVidsCommand - Gets a NSFW video from pornhub\n\nCan only be used in NSFW marked channels!\n\n**Aliases**: `porn`, `nsfwvids`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Something you want to find",
        "name": "Query"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "pornvids.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\nsfw"
    },
    "preserveName": true,
    "examples": [
      "pornvids babe"
    ],
    "category": "nsfw",
    "order": 116
  },
  {
    "id": "module:rule34",
    "longname": "module:rule34",
    "name": "rule34",
    "kind": "module",
    "description": "nsfw Rule34Command - Gets a NSFW image from rule34\n\nCan only be used in NSFW marked channels!\n\n**Aliases**: `r34`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Something you want to find",
        "name": "Query"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "rule34.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\nsfw"
    },
    "preserveName": true,
    "examples": [
      "rule34 pyrrha_nikos"
    ],
    "category": "nsfw",
    "order": 117
  },
  {
    "id": "module:checkguilds",
    "longname": "module:checkguilds",
    "name": "checkguilds",
    "kind": "module",
    "description": "Owner CheckGuildsCommand - Lists all guilds Ribbon is in",
    "category": "owner",
    "meta": {
      "lineno": 2,
      "filename": "checkguilds.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\owner"
    },
    "preserveName": true,
    "order": 118
  },
  {
    "id": "module:customtopup",
    "longname": "module:customtopup",
    "name": "customtopup",
    "kind": "module",
    "description": "Owner CustomTopUpCommand - Daniël Ocean doesn't give a crap about legality\n\n**Aliases**: `ctu`",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "The member you want to give some chips",
        "name": "AnyMember"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The amount of chips you want to give",
        "name": "ChipsAmount"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "customtopup.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\owner"
    },
    "preserveName": true,
    "examples": [
      "ctu Biscuit 1000"
    ],
    "category": "owner",
    "order": 119
  },
  {
    "id": "module:dbpost",
    "longname": "module:dbpost",
    "name": "dbpost",
    "kind": "module",
    "description": "Owner DBPostCommand - Posts current guild count to discordbotlist",
    "category": "owner",
    "meta": {
      "lineno": 2,
      "filename": "dbpost.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\owner"
    },
    "preserveName": true,
    "order": 120
  },
  {
    "id": "module:eshopfetch",
    "longname": "module:eshopfetch",
    "name": "eshopfetch",
    "kind": "module",
    "description": "Owner EShopFetchCommand - Fetch the latest data for the eShop command\n\n**Aliases**: `efetch`",
    "category": "owner",
    "meta": {
      "lineno": 2,
      "filename": "eshopfetch.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\owner"
    },
    "preserveName": true,
    "order": 121
  },
  {
    "id": "module:tagmember",
    "longname": "module:tagmember",
    "name": "tagmember",
    "kind": "module",
    "description": "Owner TagMemberCommand - Tags a member by ID\n\nPrimarily meant for mobile and when members have annoying untaggable names",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "description": "Member to make a mention to",
        "name": "AnyMember"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "tagmember.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\owner"
    },
    "preserveName": true,
    "examples": [
      "tagmember ☜(⌒▽⌒)☞guy"
    ],
    "category": "owner",
    "order": 122
  },
  {
    "id": "module:unknowncommand",
    "longname": "module:unknowncommand",
    "name": "unknowncommand",
    "kind": "module",
    "description": "Owner UnknownCommandCommand - Runs when an unknown command is used",
    "category": "owner",
    "meta": {
      "lineno": 2,
      "filename": "unknowncommand.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\owner"
    },
    "preserveName": true,
    "order": 123
  },
  {
    "id": "module:dex",
    "longname": "module:dex",
    "name": "dex",
    "kind": "module",
    "description": "Pokémon DexCommand - Gets information about a Pokémon from Dexter.\n\nDifferent forms are supported. Generally you want to write it all as 1 word with the form appended. For example\n    `necrozmaduskmane` or `metagrossmega`. If you want to get the shiny sprite displayed add the `--shiny` at the\n    end of the search.\n\n**Aliases**: `p`, `mon`, `pokemon`, `pokedex`, `df`, `dexfind`, `dexdata`, `dexter`, `rotom`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the pokemon you want to find",
        "name": "PokemonName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "dex.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\pokemon"
    },
    "preserveName": true,
    "examples": [
      "dex dragonite"
    ],
    "category": "pokemon",
    "order": 125
  },
  {
    "id": "module:flavor",
    "longname": "module:flavor",
    "name": "flavor",
    "kind": "module",
    "description": "Pokémon FlavorCommand - Gets flavor text from a Pokémon\n\nDifferent forms are supported. Generally you want to write it all as 1 word with the form appended. For example\n    `necrozmaduskmane` or `metagrossmega`. Due to message limit size it fetches as many entries possible starting\n    with generation 7 going downwards. If you want to get the shiny sprite displayed add the `--shiny` at the end of\n    the search\n\n**Aliases**: `flavors`, `dexdata`, `dexentries`, `dextext`, `dextex`, `dexter`, `flavour`, `flavours`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the pokemon you want to get flavor text for",
        "name": "PokemonName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "flavor.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\pokemon"
    },
    "preserveName": true,
    "examples": [
      "flavor dragonite"
    ],
    "category": "pokemon",
    "order": 126
  },
  {
    "id": "module:item",
    "longname": "module:item",
    "name": "item",
    "kind": "module",
    "description": "Pokémon ItemCommand - Gets information about an item in Pokémon\n\nFor item names existing of multiple words (for example `life orb`) you can either type it with or without the space\n\n**Aliases**: `it`, `bag`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the item to find",
        "name": "ItemName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "item.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\pokemon"
    },
    "preserveName": true,
    "examples": [
      "item assault vest"
    ],
    "category": "pokemon",
    "order": 127
  },
  {
    "id": "module:learn",
    "longname": "module:learn",
    "name": "learn",
    "kind": "module",
    "description": "Pokemon LearnCommand - Displays how a Pokemon can learn given moves, if at all\n\nMoves split on every `,`. See examples for usages.\nYou can specify a generation for the match by adding `--gen [1-7]` anywhere in the list of moves, with `[1-7]` being a number in that range. Generation defaults to 7\n\n**Aliases**: `learnset`, `learnall`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the pokemon to get the match for",
        "name": "PokemonName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the move you want to find out about",
        "name": "MoveName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Any additional moves you also want to find out about",
        "name": "AnotherMoveName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The generation to find the match for",
        "name": "Generation"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "learn.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\pokemon"
    },
    "preserveName": true,
    "examples": [
      "learn dragonite dragon dance",
      "learn dragonite dragon dance,dragon claw",
      "learn dragonite dragon dance, dragon claw --gen 6"
    ],
    "category": "pokemon",
    "order": 128
  },
  {
    "id": "module:ability",
    "longname": "module:ability",
    "name": "ability",
    "kind": "module",
    "description": "Pokémon AbilityCommand - Gets information on an ability in Pokémon\n\n**Aliases**: `abilities`, `abi`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the ability you  want to find",
        "name": "AbilityName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "ability.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\pokemon"
    },
    "preserveName": true,
    "examples": [
      "ability multiscale"
    ],
    "category": "pokémon",
    "order": 124
  },
  {
    "id": "module:move",
    "longname": "module:move",
    "name": "move",
    "kind": "module",
    "description": "Pokémon MoveCommand - Gets information about a move in Pokémon\n\nFor move names existing of multiple words (for example `dragon dance`) you can either type it with or without the space\n\n**Aliases**: `attack`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The move you want to find",
        "name": "MoveName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "move.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\pokemon"
    },
    "preserveName": true,
    "examples": [
      "move dragon dance"
    ],
    "category": "pokémon",
    "order": 129
  },
  {
    "id": "module:TCG",
    "longname": "module:TCG",
    "name": "TCG",
    "kind": "module",
    "description": "Pokémon PokemonTCGCommand - Gets information on a Pokemon card\n\nAt start of the command you can specify which properties you want to use for the search, the options are `name`, `types`, `subtype`, `supertype` and `hp`.\nAfter specifying which options you want to use, Ribbon will go through the options asking you the values to use for the search.\nBy default only `name` is used as argument and the supertype is set to pokemon\n\n- name is the name of the pokemon card\n- types are the types of the pokemon card (only works with pokemon as supertype)\n- subtype specifies the subtype of a card (ex: MEGA, Stage 1, BREAK, Supporter)\n- supertype specifies the supertype of a card (pokemon, trainer or energy)\n- hp specifies the hp of a pokemon\n\n**Aliases**: `ptcg`, `tcgo`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Properties you want to use for your search",
        "name": "Properties"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "tcg.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\pokemon"
    },
    "preserveName": true,
    "examples": [
      "tcg name types subtype"
    ],
    "category": "pokémon",
    "order": 130
  },
  {
    "id": "module:type",
    "longname": "module:type",
    "name": "type",
    "kind": "module",
    "description": "Pokémon TypeCommand - Gets the type matchup of any 1 or 2 types\n\n**Aliases**: `matchup`, `weakness`, `advantage`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "One or two types to find the matchup for",
        "name": "Types"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "type.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\pokemon"
    },
    "preserveName": true,
    "examples": [
      "type dragon flying"
    ],
    "category": "pokémon",
    "order": 131
  },
  {
    "id": "module:anime",
    "longname": "module:anime",
    "name": "anime",
    "kind": "module",
    "description": "Searches AnimeCommand - Gets information about any anime from kitsu.io\n\n**Aliases**: `ani`, `mal`, `kitsu`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "anime to look up",
        "name": "AnimeName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "anime.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "anime Yu-Gi-Oh Dual Monsters"
    ],
    "category": "searches",
    "order": 132
  },
  {
    "id": "module:cydia",
    "longname": "module:cydia",
    "name": "cydia",
    "kind": "module",
    "description": "Searches CydiaCommand - Gets info from a package on Cydia, only supports default repositories\n\nCan also listens to the pattern of `[[SomePackageName]]` as is custom on the [/r/jailbreak\n    subreddit](https://www.reddit.com/r/jailbreak) and [its discord server](https://discord.gg/jb) Server admins can\n    enable the `[[]]` matching by using the `rmt off` command\n\n**Aliases**: `cy`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the tweak to find",
        "name": "TweakName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "cydia.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "cydia Anemone"
    ],
    "category": "searches",
    "order": 133
  },
  {
    "id": "module:define",
    "longname": "module:define",
    "name": "define",
    "kind": "module",
    "description": "Searches DefineCommand - Define a word using glosbe\n\n**Aliases**: `def`, `dict`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the word you want to define",
        "name": "Word"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "define.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "define Google"
    ],
    "category": "searches",
    "order": 134
  },
  {
    "id": "module:docs",
    "longname": "module:docs",
    "name": "docs",
    "kind": "module",
    "description": "Searches DocsCommand - Get an entry from the Discord.JS documentation\n\n**Aliases**: `djsguide`, `guide`, `djs`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The entry from the docs you want to get info about",
        "name": "DocEntry"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The Doc version to pick, one of `stable`, `master` or `commando`",
        "name": "version"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "docs.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "docs ClientUser"
    ],
    "category": "searches",
    "order": 135
  },
  {
    "id": "module:eshop",
    "longname": "module:eshop",
    "name": "eshop",
    "kind": "module",
    "description": "Searches EShopCommand - Gets information about a game in the Nintendo Switch eShop\n\n**Aliases**: `shop`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Game that you want to find in the eShop",
        "name": "GameName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "eshop.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "eshop Breath of The Wild"
    ],
    "category": "searches",
    "order": 136
  },
  {
    "id": "module:girlsfrontline",
    "longname": "module:girlsfrontline",
    "name": "girlsfrontline",
    "kind": "module",
    "description": "Searches GirlsFrontlineCommand - Gets information about [Girls Froontline](http://gf.sunborngame.com/) characters\n\n**Aliases**: `gfsearch`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name (species), number or type of the girl you want to find",
        "name": "CharacterName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "girlsfrontline.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "girlsfrontline Negev"
    ],
    "category": "searches",
    "order": 137
  },
  {
    "id": "module:google",
    "longname": "module:google",
    "name": "google",
    "kind": "module",
    "description": "Searches GoogleCommand - Gets information through Google\n\nNote: prioritizes Knowledge Graphs for better searching\n\n**Aliases**: `search`, `g`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Thing to find on Google",
        "name": "SearchQuery"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "google.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "google Pyrrha Nikos"
    ],
    "category": "searches",
    "order": 138
  },
  {
    "id": "module:igdb",
    "longname": "module:igdb",
    "name": "igdb",
    "kind": "module",
    "description": "Searches IGDBCommand - Gets information about a game using Internet Game Database (IGDB)\n\n**Aliases**: `game`, `moby`, `games`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of any game that you want to find",
        "name": "GameName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "igdb.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "igdb Tales of Berseria"
    ],
    "category": "searches",
    "order": 139
  },
  {
    "id": "module:image",
    "longname": "module:image",
    "name": "image",
    "kind": "module",
    "description": "Searches ImageCommand - Gets an image through Google Images\n\n**Aliases**: `img`, `i`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Image to find on Google Images",
        "name": "ImageQuery"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "image.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "image Pyrrha Nikos'"
    ],
    "category": "searches",
    "order": 140
  },
  {
    "id": "module:itunes",
    "longname": "module:itunes",
    "name": "itunes",
    "kind": "module",
    "description": "Searches iTunesCommand - Search iTunes for music tracks\n\n**Aliases**: `apple`, `tunes`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The music track to look up",
        "name": "TrackQuery"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "itunes.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "itunes dash berlin symphony"
    ],
    "category": "searches",
    "order": 141
  },
  {
    "id": "module:lmgtfy",
    "longname": "module:lmgtfy",
    "name": "lmgtfy",
    "kind": "module",
    "description": "Searches LmgtfyCommand - Transform some query into a LMGTFY (Let Me Google That For You) url\n\n**Aliases**: `dumb`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The dumb sh*t people need to use google for",
        "name": "SearchQuery"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "lmgtfy.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "lmgtfy is it legal to kill an ant???"
    ],
    "category": "searches",
    "order": 142
  },
  {
    "id": "module:manga",
    "longname": "module:manga",
    "name": "manga",
    "kind": "module",
    "description": "Searches MangaCommand - Gets information about any manga from kitsu.io\n\n**Aliases**: `cartoon`, `man`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "manga to look up",
        "name": "AnyManga"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "manga.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "manga Yu-Gi-Oh"
    ],
    "category": "searches",
    "order": 143
  },
  {
    "id": "module:steam",
    "longname": "module:steam",
    "name": "steam",
    "kind": "module",
    "description": "Searches SteamCommand - Gets information about a game using Steam\n\n**Aliases**: `valve`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of any game that you want to find",
        "name": "GameName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "steam.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "steam Tales of Berseria"
    ],
    "category": "searches",
    "order": 144
  },
  {
    "id": "module:tmdb",
    "longname": "module:tmdb",
    "name": "tmdb",
    "kind": "module",
    "description": "Searches MovieCommand - Find information about a movie using TheMovieDatabase\n\n**Aliases**: `movie`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the movie you want to find",
        "name": "MovieName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "tmdb.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "tmdb Pokemon 2000"
    ],
    "category": "searches",
    "order": 145
  },
  {
    "id": "module:tvdb",
    "longname": "module:tvdb",
    "name": "tvdb",
    "kind": "module",
    "description": "Searches TVCommand - Find information about a TV series using TheMovieDatabase\n\n**Aliases**: `tv`, `show`, `serie`, `series`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the TV serie you want to find",
        "name": "SeriesName"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "tvdb.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "tvdb Pokemon"
    ],
    "category": "searches",
    "order": 146
  },
  {
    "id": "module:urban",
    "longname": "module:urban",
    "name": "urban",
    "kind": "module",
    "description": "Searches UrbanCommand - Define a word using UrbanDictionary\n\n**Aliases**: `ub`, `ud`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Phrase that you want to define",
        "name": "PhraseQuery"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "urban.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "urban Everclear"
    ],
    "category": "searches",
    "order": 147
  },
  {
    "id": "module:youtube",
    "longname": "module:youtube",
    "name": "youtube",
    "kind": "module",
    "description": "Searches YouTubeCommand - Find a video on YouTube\n\nBy default returns MessageEmbed. use `yts` to return just the URL and have in-client playback\n\n**Aliases**: `yt`, `tube`, `yts`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Video to find on YouTube",
        "name": "VideoQuery"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "youtube.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\searches"
    },
    "preserveName": true,
    "examples": [
      "youtube Voldemort Origins of the heir"
    ],
    "category": "searches",
    "order": 148
  },
  {
    "id": "module:twitchmonitors",
    "longname": "module:twitchmonitors",
    "name": "twitchmonitors",
    "kind": "module",
    "description": "Streamwatch TwitchMonitorsCommand - Configure which streamers to monitor\n\n**Aliases**: `monitors`, `monitor`, `twitchmonitor`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "List of members to monitor space delimited",
        "name": "AnyMembers"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "twitchmonitors.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\streamwatch"
    },
    "preserveName": true,
    "examples": [
      "twitchmonitors techagent favna"
    ],
    "category": "streamwatch",
    "order": 149
  },
  {
    "id": "module:twitchoutput",
    "longname": "module:twitchoutput",
    "name": "twitchoutput",
    "kind": "module",
    "description": "Streamwatch TwitchOutputCommand - Configures the channel in which twitch notifications are send\n\n**Aliases**: `output`, `twitchout`, `twitchchannel`",
    "params": [
      {
        "type": {
          "names": [
            "ChannelResolvable"
          ]
        },
        "description": "Channel to output notifs to",
        "name": "AnyChannel"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "twitchoutput.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\streamwatch"
    },
    "preserveName": true,
    "examples": [
      "twitchoutput #twitch-notifications"
    ],
    "category": "streamwatch",
    "order": 150
  },
  {
    "id": "module:twitchtoggle",
    "longname": "module:twitchtoggle",
    "name": "twitchtoggle",
    "kind": "module",
    "description": "Streamwatch TwitchToggleCommand - Killswitch for Twitch notifications\n\n**Aliases**: `twitchon`, `twitchoff`",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "True or False",
        "name": "Option"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "twitchtoggle.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\streamwatch"
    },
    "preserveName": true,
    "examples": [
      "twitchtoggle enable"
    ],
    "category": "streamwatch",
    "order": 151
  },
  {
    "id": "module:biscuit",
    "longname": "module:biscuit",
    "name": "biscuit",
    "kind": "module",
    "description": "Weeb CookieCommand - Steal someone's 🍪 gnanahahahaha\n\n**Aliases**: `.biscuit`, `biscuit`",
    "meta": {
      "lineno": 2,
      "filename": "cookie.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "params": [
      {
        "type": {
          "names": [
            "MemberResolvable"
          ]
        },
        "optional": true,
        "description": "Optional: Member to steal a cookie from",
        "name": "member"
      }
    ],
    "category": "weeb",
    "order": 152
  },
  {
    "id": "module:cuddle",
    "longname": "module:cuddle",
    "name": "cuddle",
    "kind": "module",
    "description": "Weeb CuddleCommand - Cuuuuddlleeesss!! 💕!",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "optional": true,
        "description": "Name of the member you want to cuddle",
        "name": "MemberToCuddle"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "cuddle.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "examples": [
      "cuddle Velvet"
    ],
    "category": "weeb",
    "order": 153
  },
  {
    "id": "module:feed",
    "longname": "module:feed",
    "name": "feed",
    "kind": "module",
    "description": "Weeb FeedCommand - Feed someone licious food 🍜 😋!",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "optional": true,
        "description": "Name of the member you want to feed",
        "name": "MemberToFeed"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "feed.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "examples": [
      "feed Ren"
    ],
    "category": "weeb",
    "order": 154
  },
  {
    "id": "module:hug",
    "longname": "module:hug",
    "name": "hug",
    "kind": "module",
    "description": "Weeb HugCommand - Give someone a hug ❤!",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "optional": true,
        "description": "Name of the member you want to give a hug",
        "name": "MemberToHug"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "hug.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "examples": [
      "hug Nora"
    ],
    "category": "weeb",
    "order": 155
  },
  {
    "id": "module:kiss",
    "longname": "module:kiss",
    "name": "kiss",
    "kind": "module",
    "description": "Weeb KissCommand - Give someone a kiss ❤!",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "optional": true,
        "description": "Name of the member you want to give a kiss",
        "name": "MemberToKiss"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "kiss.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "examples": [
      "kiss Pyrrha"
    ],
    "category": "weeb",
    "order": 156
  },
  {
    "id": "module:neko",
    "longname": "module:neko",
    "name": "neko",
    "kind": "module",
    "description": "Weeb NekoCommand - Get a random cute cat girl 😍!\n\n**Aliases**: `catgirl`",
    "meta": {
      "lineno": 2,
      "filename": "neko.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "examples": [
      "neko"
    ],
    "category": "weeb",
    "order": 157
  },
  {
    "id": "module:pat",
    "longname": "module:pat",
    "name": "pat",
    "kind": "module",
    "description": "Weeb PatCommand - Pat a good person 🐇!",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "optional": true,
        "description": "Name of the member you want to pat",
        "name": "MemberToPat"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "pat.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "examples": [
      "pat Ruby"
    ],
    "category": "weeb",
    "order": 158
  },
  {
    "id": "module:poke",
    "longname": "module:poke",
    "name": "poke",
    "kind": "module",
    "description": "Weeb PokeCommand - Poke an annoying person 👉!",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "optional": true,
        "description": "Name of the member you want to poke",
        "name": "MemberToPoke"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "poke.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "examples": [
      "poke Weiss"
    ],
    "category": "weeb",
    "order": 159
  },
  {
    "id": "module:slap",
    "longname": "module:slap",
    "name": "slap",
    "kind": "module",
    "description": "Weeb SlapCommand - Slap a dumb person 💢!",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "optional": true,
        "description": "Name of the member you want to slap",
        "name": "MemberToSlap"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "slap.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "examples": [
      "slap Cinder"
    ],
    "category": "weeb",
    "order": 160
  },
  {
    "id": "module:smug",
    "longname": "module:smug",
    "name": "smug",
    "kind": "module",
    "description": "Weeb SmugCommand - You're better than them",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "optional": true,
        "description": "Name of the member you want to give a hug",
        "name": "MemberToHug"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "smug.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "examples": [
      "smug McDonalds"
    ],
    "category": "weeb",
    "order": 161
  },
  {
    "id": "module:tickle",
    "longname": "module:tickle",
    "name": "tickle",
    "kind": "module",
    "description": "Weeb TickleCommand - TICKLE WAR 😂!!",
    "params": [
      {
        "type": {
          "names": [
            "GuildMemberResolvable"
          ]
        },
        "optional": true,
        "description": "Name of the member you want to tickle",
        "name": "MemberToTickle"
      }
    ],
    "meta": {
      "lineno": 2,
      "filename": "tickle.js",
      "path": "E:\\UserFiles\\DevProjects\\ribbon\\docsbuild\\commands\\weeb"
    },
    "preserveName": true,
    "examples": [
      "tickle Yang"
    ],
    "category": "weeb",
    "order": 162
  }
]
